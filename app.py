import streamlit as st
import pandas as pd
import numpy as np

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Calculadora ACS CTE-DB-HE4",
    page_icon="üíß",
    layout="centered"
)

# T√≠tulo y descripci√≥n
st.title("Calculadora de Demanda de Agua Caliente Sanitaria (ACS)")
st.markdown("Esta aplicaci√≥n calcula la demanda diaria de Agua Caliente Sanitaria (ACS) seg√∫n el C√≥digo T√©cnico de la Edificaci√≥n (CTE-DB-HE4).")

# Datos de referencia (Anejo F del CTE-DB-HE4)
# Tabla a: ocupaci√≥n m√≠nima seg√∫n n√∫mero de dormitorios
tabla_a = pd.DataFrame({
    'N√∫mero de dormitorios': [1, 2, 3, 4, 5, 6, '‚â•6'],
    'N√∫mero de personas': [1.5, 3, 4, 5, 6, 6, 7]
})

# Tabla b: factores de centralizaci√≥n seg√∫n n√∫mero de viviendas
tabla_b = pd.DataFrame({
    'N√∫mero de viviendas': ['‚â§3', '4-10', '11-20', '21-50', '51-75', '76-100', '‚â•101'],
    'Factor de centralizaci√≥n': [1, 0.95, 0.90, 0.85, 0.80, 0.75, 0.70]
})

# Tabla c: valores para usos terciarios
tabla_c = pd.DataFrame({
    'Criterio de demanda': [
        'Hospitales y cl√≠nicas', 
        'Ambulatorio y centro de salud', 
        'Hotel *****', 
        'Hotel ****', 
        'Hotel ***', 
        'Hotel/hostal **', 
        'Camping', 
        'Hostal/pensi√≥n *', 
        'Residencia', 
        'Centro penitenciario', 
        'Albergue', 
        'Vestuarios/duchas colectivas', 
        'Escuela sin ducha', 
        'Escuela con ducha', 
        'Cuarteles', 
        'F√°bricas y talleres', 
        'Oficinas', 
        'Gimnasios', 
        'Restaurantes', 
        'Cafeter√≠as'
    ],
    'Litros/d√≠a¬∑persona': [
        55, 
        41, 
        69, 
        55, 
        41, 
        34, 
        21, 
        28, 
        41, 
        28, 
        24, 
        21, 
        4, 
        21, 
        28, 
        21, 
        2, 
        21, 
        8, 
        1
    ]
})

# Crear formulario para entrada de datos
with st.form("formulario_acs"):
    # Tipo de uso
    tipo_uso = st.radio(
        "Tipo de uso:",
        ["Residencial", "Terciario"],
        index=0,
        horizontal=True
    )
    
    if tipo_uso == "Residencial":
        # N√∫mero de dormitorios
        num_dormitorios = st.number_input(
            "N√∫mero de dormitorios:",
            min_value=1,
            max_value=10,
            value=2,
            step=1,
            help="Introduce el n√∫mero de dormitorios (m√≠nimo 1)"
        )
        
        # Tipo de edificaci√≥n
        tipo_edificacion = st.radio(
            "Tipo de edificaci√≥n:",
            ["Unifamiliar", "Colectiva"],
            index=0,
            horizontal=True
        )
        
        if tipo_edificacion == "Colectiva":
            # N√∫mero de viviendas
            num_viviendas = st.number_input(
                "N√∫mero de viviendas:",
                min_value=1,
                max_value=200,
                value=10,
                step=1,
                help="Introduce el n√∫mero total de viviendas en la edificaci√≥n"
            )
    else:  # Terciario
        # Criterio de demanda para uso terciario
        criterio_terciario = st.selectbox(
            "Criterio de demanda:",
            tabla_c['Criterio de demanda'].tolist()
        )
        
        # N√∫mero de personas/usuarios
        num_personas_terciario = st.number_input(
            "N√∫mero de personas/usuarios:",
            min_value=1,
            value=10,
            step=1,
            help="Introduce el n√∫mero de personas o usuarios"
        )
    
    # Temperatura de servicio
    temp_servicio = st.slider(
        "Temperatura de servicio (¬∞C):",
        min_value=30,
        max_value=90,
        value=60,
        step=1,
        help="Temperatura de servicio del agua caliente sanitaria"
    )
    
    # Bot√≥n de c√°lculo
    submitted = st.form_submit_button("Calcular demanda ACS")

# Funci√≥n para obtener personas seg√∫n dormitorios (Tabla a)
def obtener_personas(dormitorios):
    """Devuelve el n√∫mero de personas seg√∫n el n√∫mero de dormitorios (Tabla a)"""
    if dormitorios >= 6:
        return 7
    return tabla_a.loc[tabla_a['N√∫mero de dormitorios'] == dormitorios, 'N√∫mero de personas'].values[0]

# Funci√≥n para obtener factor de centralizaci√≥n (Tabla b)
def obtener_factor_centralizacion(viviendas):
    """Devuelve el factor de centralizaci√≥n seg√∫n el n√∫mero de viviendas (Tabla b)"""
    if viviendas <= 3:
        return 1
    elif viviendas <= 10:
        return 0.95
    elif viviendas <= 20:
        return 0.90
    elif viviendas <= 50:
        return 0.85
    elif viviendas <= 75:
        return 0.80
    elif viviendas <= 100:
        return 0.75
    else:
        return 0.70

# Funci√≥n para obtener litros por persona en uso terciario (Tabla c)
def obtener_litros_terciario(criterio):
    """Devuelve los litros por persona para el criterio de uso terciario (Tabla c)"""
    return tabla_c.loc[tabla_c['Criterio de demanda'] == criterio, 'Litros/d√≠a¬∑persona'].values[0]

# Funci√≥n para calcular la demanda de ACS
def calcular_demanda_acs(uso, dormitorios=None, edificacion=None, viviendas=None, 
                         criterio_terciario=None, personas_terciario=None, 
                         temperatura=60):
    """
    Calcula la demanda diaria de ACS seg√∫n el CTE-DB-HE4
    
    Args:
        uso: 'Residencial' o 'Terciario'
        dormitorios: N√∫mero de dormitorios (para uso residencial)
        edificacion: 'Unifamiliar' o 'Colectiva' (para uso residencial)
        viviendas: N√∫mero de viviendas (para edificaci√≥n colectiva)
        criterio_terciario: Criterio de demanda para uso terciario
        personas_terciario: N√∫mero de personas para uso terciario
        temperatura: Temperatura de servicio en ¬∞C
    
    Returns:
        Demanda diaria de ACS en litros/d√≠a
    """
    # Valor de referencia: 28 L/d√≠a¬∑persona a 60¬∞C
    demanda_referencia = 28
    
    if uso == "Residencial":
        # Calcular personas m√≠nimas seg√∫n n√∫mero de dormitorios
        personas = obtener_personas(dormitorios)
        
        # Calcular demanda base
        demanda = demanda_referencia * personas
        
        # Si es edificaci√≥n colectiva, aplicar factor de centralizaci√≥n
        if edificacion == "Colectiva":
            factor = obtener_factor_centralizacion(viviendas)
            demanda = demanda * viviendas * factor
    else:  # Terciario
        # Obtener litros por persona seg√∫n criterio
        litros_persona = obtener_litros_terciario(criterio_terciario)
        
        # Calcular demanda
        demanda = litros_persona * personas_terciario
    
    # Ajustar si la temperatura es diferente a 60¬∞C
    if temperatura != 60:
        demanda = demanda * (60 - 15) / (temperatura - 15)
    
    return demanda

# Procesar el c√°lculo cuando se env√≠a el formulario
if submitted:
    try:
        if tipo_uso == "Residencial":
            demanda = calcular_demanda_acs(
                uso=tipo_uso,
                dormitorios=num_dormitorios,
                edificacion=tipo_edificacion,
                viviendas=num_viviendas if tipo_edificacion == "Colectiva" else None,
                temperatura=temp_servicio
            )
            
            # Mostrar resultados detallados para uso residencial
            st.success(f"**Demanda diaria de ACS: {demanda:.2f} L/d√≠a**")
            
            # Explicaci√≥n del c√°lculo
            st.subheader("Detalles del c√°lculo:")
            
            # Mostrar personas seg√∫n dormitorios
            personas = obtener_personas(num_dormitorios)
            st.write(f"‚Ä¢ Vivienda con {num_dormitorios} dormitorios: {personas} personas")
            st.write(f"‚Ä¢ Demanda de referencia: 28 L/d√≠a por persona a 60¬∞C")
            
            if tipo_edificacion == "Unifamiliar":
                st.write(f"‚Ä¢ C√°lculo base: {personas} personas √ó 28 L/d√≠a = {personas * 28} L/d√≠a")
            else:  # Colectiva
                factor = obtener_factor_centralizacion(num_viviendas)
                st.write(f"‚Ä¢ N√∫mero de viviendas: {num_viviendas}")
                st.write(f"‚Ä¢ Factor de centralizaci√≥n: {factor}")
                st.write(f"‚Ä¢ C√°lculo base: {personas} personas √ó 28 L/d√≠a √ó {num_viviendas} viviendas √ó {factor} = {personas * 28 * num_viviendas * factor} L/d√≠a")
            
            # Si hay ajuste de temperatura
            if temp_servicio != 60:
                st.write(f"‚Ä¢ Ajuste por temperatura de servicio ({temp_servicio}¬∞C): √ó {(60 - 15) / (temp_servicio - 15):.4f}")
        
        else:  # Terciario
            demanda = calcular_demanda_acs(
                uso=tipo_uso,
                criterio_terciario=criterio_terciario,
                personas_terciario=num_personas_terciario,
                temperatura=temp_servicio
            )
            
            # Mostrar resultados detallados para uso terciario
            st.success(f"**Demanda diaria de ACS: {demanda:.2f} L/d√≠a**")
            
            # Explicaci√≥n del c√°lculo
            st.subheader("Detalles del c√°lculo:")
            
            # Mostrar litros por persona seg√∫n criterio
            litros_persona = obtener_litros_terciario(criterio_terciario)
            st.write(f"‚Ä¢ Criterio de demanda: {criterio_terciario}")
            st.write(f"‚Ä¢ Demanda de referencia: {litros_persona} L/d√≠a por persona a 60¬∞C")
            st.write(f"‚Ä¢ N√∫mero de personas: {num_personas_terciario}")
            st.write(f"‚Ä¢ C√°lculo base: {num_personas_terciario} personas √ó {litros_persona} L/d√≠a = {num_personas_terciario * litros_persona} L/d√≠a")
            
            # Si hay ajuste de temperatura
            if temp_servicio != 60:
                st.write(f"‚Ä¢ Ajuste por temperatura de servicio ({temp_servicio}¬∞C): √ó {(60 - 15) / (temp_servicio - 15):.4f}")
    
    except Exception as e:
        st.error(f"Error en el c√°lculo: {str(e)}")

# Mostrar tablas de referencia
with st.expander("Ver tablas de referencia del CTE-DB-HE4"):
    st.subheader("Tabla A: Ocupaci√≥n m√≠nima seg√∫n n√∫mero de dormitorios")
    st.table(tabla_a)
    
    st.subheader("Tabla B: Factores de centralizaci√≥n seg√∫n n√∫mero de viviendas")
    st.table(tabla_b)
    
    st.subheader("Tabla C: Valores para usos terciarios")
    st.table(tabla_c)

# Ejemplos de c√°lculo
with st.expander("Ver ejemplos de c√°lculo"):
    st.subheader("Ejemplos:")
    
    # Ejemplo 1: Vivienda con 2 dormitorios
    st.markdown("**Ejemplo 1: Vivienda unifamiliar con 2 dormitorios**")
    st.write("- 2 dormitorios: 3 personas")
    st.write("- Demanda: 3 personas √ó 28 L/d√≠a = 84 L/d√≠a")
    
    # Ejemplo 2: Edificio de 10 viviendas con 4 dormitorios
    st.markdown("**Ejemplo 2: Edificio de 10 viviendas con 4 dormitorios cada una**")
    st.write("- 4 dormitorios: 5 personas por vivienda")
    st.write("- Factor de centralizaci√≥n para 10 viviendas: 0.95")
    st.write("- Demanda: 5 personas √ó 28 L/d√≠a √ó 10 viviendas √ó 0.95 = 1330 L/d√≠a")

# Informaci√≥n adicional
st.markdown("---")
st.markdown("### Notas:")
st.markdown("- La demanda de referencia es de 28 L/d√≠a¬∑persona a 60 ¬∞C para uso residencial.")
st.markdown("- Si la temperatura de servicio es diferente a 60 ¬∞C, se aplica un factor de correcci√≥n.")
st.markdown("- Los c√°lculos se basan en el C√≥digo T√©cnico de la Edificaci√≥n (CTE-DB-HE4), Anejo F.")
